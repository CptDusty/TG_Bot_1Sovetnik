from aiogram import types, Router, Dispatcher, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, FSInputFile
from db import (get_user_info, check_user, get_users,get_specialities, 
                save_thanks, get_sent_thanks, get_sent_thanks_curr, 
                get_sent_thanks_prev,get_received_thanks_curr,
                get_received_thanks,get_received_thanks_prev,
                get_top_thanks_s, get_top_thanks_curr_s, get_top_thanks_prev_s,
                get_top_thanks_r, get_top_thanks_curr_r, get_top_thanks_prev_r,
                get_specialities, get_users_wspec
                )
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import keyboard as kb
from config import bot
from text import text, button
from collections import defaultdict
router = Router()



#–ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∞—Å–∏–±–æ–∫
class Send_thank(StatesGroup):
    spec = State()
    reciever = State()
    text = State()

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å–ø–∞—Å–∏–±–∫–∏
@router.callback_query(lambda c: c.data == 'thanks')

async def thanks(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if check_user(callback.from_user.id): #–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ —é–∑–µ—Ä
        await kb.edit_keybaoard(callback,kb.thanks_menu(),text('thanks'))
    else:
        callback.answer(text=f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é. –ù–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º  —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—é {callback.from_user.id}", reply_markup=kb.main_new)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∞—Å–∏–±–∫—É
@router.callback_query(lambda c: c.data == 'send_thank')

async def ty_spec(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Send_thank.spec)
    user_id = callback.from_user.id
    await kb.edit_keybaoard(callback,kb.make_spec_ty_keyboard(get_specialities()), text("send_thank"))#(text="–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—å", reply_markup=kb.make_spec_ty_keyboard(get_specialities()))
    
#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(Send_thank.spec) #lambda c: c.data and c.data.startswith('tyspec_'))
async def ty_receiver(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    speciality_id = callback.data.replace('tyspec_','')
    #await callback_query.message.delete_reply_markup(str(callback_query.message.message_id))
    if speciality_id != '12':
        await state.update_data(spec=speciality_id)
        await state.set_state(Send_thank.reciever)
        await kb.edit_keybaoard(callback, kb.make_users_keyboard(get_users(callback.from_user.id, speciality_id)), '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏')
        #await callback.message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ, –≤–æ—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:', reply_markup = kb.make_users_keyboard(get_users(callback.from_user.id, speciality_id)))
    else:
        await state.set_state(Send_thank.reciever)
        await kb.edit_keybaoard(callback, kb.make_users_keyboard(get_users_wspec(callback.from_user.id)), "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.callback_query(Send_thank.reciever) #lambda c: c.data and c.data.startswith('reciever_'))
async def ty_text(callback_query: types.CallbackQuery, state: FSMContext):
    #await callback_query.message.delete_reply_markup(str(callback_query.message.message_id))
    #await  callback_query.message.delete_reply_markup(str(callback_query.message.message_id-1))
    reciever_id = callback_query.data.replace('reciever_','')
    await state.update_data(reciever=reciever_id)
    await state.set_state(Send_thank.text)
    await kb.edit_keybaoard(callback_query, kb.auto_ty,f"""–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ª—é–±—É—é —Å—Å—ã–ª–∫—É.
 \n –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å—Ç–æ —Å–ø–∞—Å–∏–±–∫–∞" –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–ø–∞—Å–∏–±–∫—É –±–µ–∑ —Ç–µ–∫—Å—Ç–∞""")
    print(callback_query.message.message_id)
    #await callback_query.message.answer(text = "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.", reply_markup=kb.auto_ty)

#–û—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∞—Å–∏–±–æ–∫
@router.message(Send_thank.text)

async def ty_send(message: Message, state: FSMContext):
    
    tytext = message.text
    await state.update_data(text=tytext)
    
    message_ty = await state.get_data()
    reciever_id = message_ty['reciever']
    text_ty = message_ty['text']
    sender_info = get_user_info(message.from_user.id)
    user_id = message.from_user.id
    save_thanks(message.from_user.id, reciever_id, text_ty)
    #await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    #await message.delete_reply_markup(str(message.message_id-1))
    await bot.send_message(chat_id=user_id,text = "–°–ø–∞—Å–∏–±–∫–∞ —É–ª–µ—Ç–µ–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.", reply_markup= kb.finish)
    await bot.send_message(chat_id = reciever_id, text= f'–¢–µ–±–µ –ø—Ä–∏—à–ª–∞ —Å–ø–∞—Å–∏–±–∫–∞! \n –¢–µ–∫—Å—Ç: {text_ty} \n –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info[1]} {sender_info[2]}')
    await state.clear()
@router.callback_query(Send_thank.text)

async def ty_send_auto(callback: types.CallbackQuery, state: FSMContext):
    ty_text = "-"
    await state.update_data(text=ty_text)
    message_ty = await state.get_data()
    reciever_id = message_ty['reciever']
    text_ty = message_ty['text']
    sender_info = get_user_info(callback.from_user.id)
    save_thanks(callback.from_user.id, reciever_id, text_ty)
    await kb.edit_keybaoard(callback, kb.finish, "–°–ø–∞—Å–∏–±–∫–∞ —É–ª–µ—Ç–µ–ª–∞")
    #await callback.answer(text = "–°–ø–∞—Å–∏–±–∫–∞ —É–ª–µ—Ç–µ–ª–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é.", reply_markup= kb.finish_send_ty)
    await bot.send_message(chat_id = reciever_id, text= f'–¢–µ–±–µ –ø—Ä–∏—à–ª–∞ —Å–ø–∞—Å–∏–±–∫–∞!\n –¢–µ–∫—Å—Ç: {text_ty}\n –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info[1]} {sender_info[2]}\n –í–æ—Ç –∞—É–¥–∏–æ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞')
    audio = FSInputFile('media/zhil-byl-pes-spasibo-ty-zahodi-esli-chto.mp3')
    await bot.send_voice(chat_id=reciever_id, voice=audio)
    await state.clear()

class My_ty(StatesGroup):
    type = State()
    date = State()
    table = State()
@router.callback_query(lambda c: c.data == 'my_thanks')
async def my_ty(callback:types.CallbackQuery, state: FSMContext):
    await state.set_state(My_ty.type)
    await kb.edit_keybaoard(callback, kb.my_thanks_type(), text('type_thanks'))

@router.callback_query(My_ty.type)
async def my_ty_type(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(type=callback.data)
    await state.set_state(My_ty.date)
    await kb.edit_keybaoard(callback, kb.my_thanks_period(), text('period_thanks'))
    print(callback.data)
@router.callback_query(My_ty.date)
async def my_ty_date(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(date=callback.data)
    await state.set_state(My_ty.table)

    table_data = await state.get_data()
    table_type = table_data['type']
    table_period = table_data['date']
    id = callback.from_user.id

    
    if table_type == "sent_thanks":
        if table_period == "all_period":
            table = get_sent_thanks(id)
        elif table_period == "curr_period":
            table = get_sent_thanks_curr(id)
        elif table_period == "prev_period":
            table = get_sent_thanks_prev(id)
        text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ø–∞—Å–∏–±–æ–∫"
    elif table_type== "rec_thanks":
        if table_period == "all_period":
            table = get_received_thanks(id)
        elif table_period == "curr_period":
            table = get_received_thanks_curr(id)
        elif table_period == "prev_period":
            table = get_received_thanks_prev(id)
        text = "–ü–æ–ª—É—á–µ–Ω–æ —Å–ø–∞—Å–∏–±–æ–∫"
    else:
        table = []

    if len(table)>0:
        user_messages = defaultdict(list)
        for row in table:
            user_messages[(row[0], row[1])].append(row[2])

        table_text = "<pre>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ <pre> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for user, messages in user_messages.items():
            table_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[0]}  {user[1]}\n–¢–µ–∫—Å—Ç—ã:\n"
            for message in messages:
                table_text += f"- {message}\n"
            table_text += "\n"
        table_text += "</pre>"
        table_text +=f"{text}: {len(table)}"
        await kb.edit_keybaoard_html(callback, kb.finish_my_thanks,table_text)
        #await callback.message.answer(text= f'{text} {len(table)}', reply_markup=ReplyKeyboardRemove())
        #await callback.message.answer(text=table_text,reply_markup= kb.finish_my_thanks ,parse_mode='HTML')
    else: 
        await kb.edit_keybaoard_html(callback, kb.finish_my_thanks,"–¢—É—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –∏–ª–∏ –ø–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ, –∏–ª–∏ –±–æ—Ç –ø–æ–ª–æ–º–∞–ª—Å—è. –ù–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –º–æ–ª–æ–¥–µ—Üü§©")
        #await callback.message.answer(text= "–¢—É—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –∏–ª–∏ –ø–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ, –∏–ª–∏ –±–æ—Ç –ø–æ–ª–æ–º–∞–ª—Å—è. –ù–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç—ã –º–æ–ª–æ–¥–µ—Üü§©", reply_markup=ReplyKeyboardRemove())

class Top(StatesGroup):
    type_top = State()
    period_top = State()
    table = State()

@router.callback_query(lambda c: c.data == 'top_thanks')
async def my_ty(callback:types.CallbackQuery, state: FSMContext):
    await state.set_state(Top.type_top)
    await kb.edit_keybaoard(callback, kb.my_thanks_type(), text('type_thanks'))

@router.callback_query(Top.type_top)
async def get_top(callback: types.CallbackQuery, state: FSMContext):
    ty_type = callback.data
    await state.update_data(type_top=ty_type)
    await state.set_state(Top.period_top)
    await kb.edit_keybaoard(callback,kb.top_period(), "–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¢–û–ü?")
    #await message.answer(text='–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=kb.my_ty_period)

@router.callback_query(Top.period_top)
async def top_table(callback: types.CallbackQuery, state: FSMContext):
    ty_period = callback.data
    await state.update_data(period_top=ty_period)
    await state.set_state(Top.table)
    data = await state.get_data()
    period = data['period_top']
    type_top = data["type_top"]
    id = callback.from_user.id
    if type_top == "rec_thanks":
        if period == "all_period":
            table = get_top_thanks_r()
        elif period == "curr_period":
            table = get_top_thanks_curr_r()
        elif period == "prev_period":
            table = get_top_thanks_prev_r()
        #table +=f"–¢–û–ü –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö"
    elif type_top == "sent_thanks":
        if period == "all_period":
            table = get_top_thanks_s()
        elif period == "curr_period":
            table = get_top_thanks_curr_s()
        elif period == "prev_period":
            table = get_top_thanks_prev_s()
        #table +=f"–¢–û–ü –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö"
    if len(table)>0:
        table_text = "<pre>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ <pre> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        for row in table:
            table_text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {row[0]}  {row[1]}\n–ö–æ–ª-–≤–æ: {row[2]}\n\n"
        table_text += "</pre>"
        await kb.edit_keybaoard_html(callback, kb.finish_top_thanks,table_text)
        await state.clear()
    else: 
        await kb.edit_keybaoard_html(callback, kb.finish_top_thanks,"–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–æ –≤ –º–æ–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ —Ç—ã –¢–û–ü-1")

        await state.set_state(Top.period_top)
        
    